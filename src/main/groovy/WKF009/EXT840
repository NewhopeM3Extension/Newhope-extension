/*
 ***************************************************************
 *                                                             *
 *                           NOTICE                            *
 *                                                             *
 *   THIS SOFTWARE IS THE PROPERTY OF AND CONTAINS             *
 *   CONFIDENTIAL INFORMATION OF INFOR AND/OR ITS AFFILIATES   *
 *   OR SUBSIDIARIES AND SHALL NOT BE DISCLOSED WITHOUT PRIOR  *
 *   WRITTEN PERMISSION. LICENSED CUSTOMERS MAY COPY AND       *
 *   ADAPT THIS SOFTWARE FOR THEIR OWN USE IN ACCORDANCE WITH  *
 *   THE TERMS OF THEIR SOFTWARE LICENSE AGREEMENT.            *
 *   ALL OTHER RIGHTS RESERVED.                                *
 *                                                             *
 *   (c) COPYRIGHT 2020 INFOR.  ALL RIGHTS RESERVED.           *
 *   THE WORD AND DESIGN MARKS SET FORTH HEREIN ARE            *
 *   TRADEMARKS AND/OR REGISTERED TRADEMARKS OF INFOR          *
 *   AND/OR ITS AFFILIATES AND SUBSIDIARIES. ALL RIGHTS        *
 *   RESERVED.  ALL OTHER TRADEMARKS LISTED HEREIN ARE         *
 *   THE PROPERTY OF THEIR RESPECTIVE OWNERS.                  *
 *                                                             *
 ***************************************************************
 */
 
 import groovy.lang.Closure;
 
 import java.time.LocalDate;
 import java.time.LocalDateTime;
 import java.time.format.DateTimeFormatter;
 import groovy.json.JsonSlurper;
 import java.math.BigDecimal;
 import java.math.RoundingMode;
 import java.text.DecimalFormat;
 import java.time.ZoneId;
 
 /*
 *Modification area - M3
 *Nbr            Date       User id     Description
 *WKF009         20230615   XWZHAO      Create transactions in GLS840 for Supplier invoice varances
 
 /*
  * Add entries to APS450
  */
public class EXT840 extends ExtendM3Batch {
  private final LoggerAPI logger;
  private final DatabaseAPI database;
  private final BatchAPI batch;
  private final MICallerAPI miCaller;
  private final ProgramAPI program;
  
  private String PROC;
  private String puno;
  private String pnli;
  private String pnls;
  
  private int XXCONO;
  private String noseries01;
  private int currentDate;
  private int currentTime
  
  public EXT840(LoggerAPI logger, DatabaseAPI database, BatchAPI batch, MICallerAPI miCaller, ProgramAPI program) {
    this.logger = logger;
    this.database = database;
    this.batch = batch;
  	this.miCaller = miCaller;
  	this.program = program;
  }
  
  public void main() {
    
    XXCONO= program.LDAZD.CONO;
    
    if (!batch.getReferenceId().isPresent()) {
      logger.debug("Job data for job ${batch.getJobId()} is missing");
      return;
    }
    
    // Get parameters from EXTJOB
    logger.debug("ReferenceId=" + batch.getReferenceId());
    Optional<String> data = getJobData(batch.getReferenceId().get());
    
    if (!data.isPresent()) {
      logger.debug("Job reference Id ${batch.getReferenceId().get()} is passed, but data was not found");
      return
    }
    
    ZoneId zid = ZoneId.of("Australia/Sydney"); 
    currentDate = LocalDate.now(zid).format(DateTimeFormatter.ofPattern("yyyyMMdd")).toInteger();
    currentTime = Integer.valueOf(LocalDateTime.now().format(DateTimeFormatter.ofPattern("HHmmss")));
    
    noseries01 = "";
    initRun();
    
    DBAction queryEXTVAR = database.table("EXTVAR").index("10").selectAllFields().build();
    DBContainer EXTVAR = queryEXTVAR.getContainer();
  	EXTVAR.set("EXCONO", XXCONO);
  	EXTVAR.set("EXPROC", 0);
  	queryEXTVAR.readAll(EXTVAR, 2, listEXTVAR);
  	
  }
  /*
	 * getJobData 
	 *
	*/
  private Optional<String> getJobData(String referenceId) {
    def queryEXTJOB = database.table("EXTJOB").index("00").selection("EXRFID", "EXJOID", "EXDATA").build();
    def EXTJOB = queryEXTJOB.createContainer();
    EXTJOB.set("EXCONO", XXCONO);
    EXTJOB.set("EXRFID", referenceId);
    if (queryEXTJOB.read(EXTJOB)) {
      return Optional.of(EXTJOB.getString("EXDATA"));
    }
    return Optional.empty();
  } 
  /*
	 * initRun 
	 *
	*/
  def initRun() {
    
    DBAction actionCUGEX1 = database.table("CUGEX1").index("00").selection("F1A030").build();

    DBContainer CUGEX1 = actionCUGEX1.getContainer();
    CUGEX1.set("F1CONO", XXCONO);
    CUGEX1.set("F1FILE", "VARIANCE");
    CUGEX1.set("F1PK01", "01");
    actionCUGEX1.readAll(CUGEX1, 3, 1, lstCUGEX1);
    logger.debug("noseries01=" + noseries01);
    
    String trans = "";
    if (noseries01.isBlank()) {
      noseries01 = "100000001";
      trans = "AddFieldValue";
    } else {
      trans = "ChgFieldValue";
    }
    
    int noser = noseries01.toInteger() + 1;
    def params01 = [ "FILE":"VARIANCE".toString(), "PK01": "01".toString(),"A030": noser.toString()];
       
    def callback01 = {
       Map<String, String> response ->
       
    }
  
    miCaller.call("CUSEXTMI", trans, params01, callback01);
    
  }
  /*
   * lstCUGEX1 - Callback function to return CUGEX1 records
   *
  */
  Closure<?> lstCUGEX1 = { DBContainer CUGEX1 ->
      noseries01 = CUGEX1.get("F1A030").toString().trim();
  }
  /*
  * listEXTVAR - Callback function to return EXTVAR
  *
  */
  Closure<?> listEXTVAR = { DBContainer EXTVAR ->
    
    String divi = EXTVAR.get("EXDIVI").toString().trim();
    String yea4 = EXTVAR.get("EXYEA4").toString().trim();
    String jrno = EXTVAR.get("EXJRNO").toString().trim();
    String jsno = EXTVAR.get("EXJSNO").toString().trim();
    
    DBAction queryFGLEDG = database.table("FGLEDG").index("00").selectAllFields().build();
    DBContainer FGLEDG = queryFGLEDG.getContainer();
    FGLEDG.set("EGCONO", XXCONO);
    FGLEDG.set("EGDIVI", divi);
    FGLEDG.set("EGYEA4", yea4.toInteger());
    FGLEDG.set("EGJRNO", jrno.toInteger());
    FGLEDG.set("EGJSNO", jsno.toInteger());
    
    if (queryFGLEDG.read(FGLEDG)) {
      String vono = FGLEDG.get("EGVONO").toString().trim();
      String vtxt = FGLEDG.get("EGVTXT").toString().trim();
      
      boolean isRecoded = false;
      if (vtxt.length() > 40) {
        String pos40 = vtxt.substring(39,40);
        if (pos40.equals("X")) {
          isRecoded = true;
        }
      }
      if (isRecoded) {
        PROC = "";
        updateProcessFlag(divi, yea4, jrno, jsno, "2");
      } else {
        recodingVariance(FGLEDG);
      }
    }
  }
  /*
   * recodeVariance - recording the variance through APS450MI
   *
  */
  def recodingVariance(DBContainer FGLEDG) {  
    String jrno_FPLEDG = "";
    String jsno_FPLEDG = "";
    
    String divi = FGLEDG.get("EGDIVI").toString().trim();
    String yea4 = FGLEDG.get("EGYEA4").toString().trim();
    String jrno = FGLEDG.get("EGJRNO").toString().trim();
    String jsno = FGLEDG.get("EGJSNO").toString().trim();
    String vono = FGLEDG.get("EGVONO").toString().trim();
    String vser = FGLEDG.get("EGVSER").toString().trim();
    
    String ait1 = FGLEDG.get("EGAIT1").toString().trim();
    String ait2 = FGLEDG.get("EGAIT2").toString().trim();
    String ait3 = FGLEDG.get("EGAIT3").toString().trim();
    String ait4 = FGLEDG.get("EGAIT4").toString().trim();
    String ait5 = FGLEDG.get("EGAIT5").toString().trim();
    String ait6 = FGLEDG.get("EGAIT6").toString().trim();
    String ait7 = FGLEDG.get("EGAIT7").toString().trim();
    String acam = FGLEDG.get("EGACAM").toString().trim();
    String acqt = FGLEDG.get("EGACQT").toString().trim();
    String vtcd = FGLEDG.get("EGVTCD").toString().trim();
    String acdt = FGLEDG.get("EGACDT").toString().trim();
    String vtxt = FGLEDG.get("EGVTXT").toString().trim();
    
    def params = ["DIVI":divi, "YEA4":yea4, "VSER":"", "VONO":vono];
      
    Closure<?> GLS200MIcallback = {
      Map<String, String> response ->
      
      if(response.TRCD != null && response.TRCD.equals("40")) {
        jrno_FPLEDG = response.JRNO.trim();
        jsno_FPLEDG = response.JSNO.trim();
      }
    }

    miCaller.call("GLS200MI", "LstVoucherLines", params, GLS200MIcallback);
    
    DBAction queryFPLEDG = database.table("FPLEDG").index("00").selectAllFields().build();
    DBContainer FPLEDG = queryFPLEDG.getContainer();
    FPLEDG.set("EPCONO", XXCONO);
    FPLEDG.set("EPDIVI", divi);
    FPLEDG.set("EPYEA4", yea4.toInteger());
    FPLEDG.set("EPJRNO", jrno_FPLEDG.toInteger());
    FPLEDG.set("EPJSNO", jsno_FPLEDG.toInteger());
    
    if (!queryFPLEDG.read(FPLEDG)) {
      PROC = "";
      updateProcessFlag(divi, yea4, jrno, jsno, "2");
      return;
    }
    
    String suno = FPLEDG.get("EPSUNO").toString().trim();
    String sypn = FPLEDG.get("EPSPYN").toString().trim();
    String sino = FPLEDG.get("EPSINO").toString().trim();
    String inyr = FPLEDG.get("EPINYR").toString().trim();
    logger.debug("SUNO=" + suno + " SINO=" + sino + " INYR=" + inyr);
    
    if (sino.isEmpty()) {
      PROC = "";
      updateProcessFlag(divi, yea4, jrno, jsno, "2");
      return;
    }
    
    puno = "";
    pnli = "";
    pnls = "";
    
    ExpressionFactory expression = database.getExpressionFactory("FGINAE");
    expression = expression.eq("F9AIT1", ait1);
    expression = expression.and(expression.eq("F9AIT2", ait2));
    expression = expression.and(expression.eq("F9AIT3", ait3));
    expression = expression.and(expression.eq("F9AIT4", ait4));
    expression = expression.and(expression.eq("F9AIT5", ait5));
    expression = expression.and(expression.eq("F9AIT6", ait6));
    expression = expression.and(expression.eq("F9AIT7", ait7));
    expression = expression.and(expression.eq("F9ACAM", acam));
    
    DBAction queryFGINAE = database.table("FGINAE").index("00").matching(expression).selection("F9PUNO", "F9PNLI", "F9PNLS").build();
    DBContainer FGINAE = queryFGINAE.getContainer();
    FGINAE.set("F9CONO", XXCONO);
    FGINAE.set("F9DIVI", divi);
    FGINAE.set("F9SUNO", suno);
    FGINAE.set("F9SINO", sino);
    FGINAE.set("F9INYR", inyr.toInteger());
    FGINAE.set("F9INIT", "12");
   
    queryFGINAE.readAll(FGINAE, 6, 1, lstFGINAE);
    
    if (puno.isEmpty() && pnli.isEmpty()) {
      PROC = "";
      updateProcessFlag(divi, yea4, jrno, jsno, "2");
      return;
    }
    
    DBAction queryCACCST = database.table("CACCST").index("00").selection("SCAIT1", "SCAIT2", "SCAIT3", "SCAIT4", "SCAIT5", "SCAIT6", "SCAIT7").build();
    DBContainer CACCST = queryCACCST.getContainer();
    CACCST.set("SCCONO", XXCONO);
    CACCST.set("SCRIDN", puno);
    CACCST.set("SCRIDL", pnli.toInteger());
    CACCST.set("SCRIDX", pnls.toInteger());
    CACCST.set("SCORCA", "251");
    CACCST.set("SCORCA", "251");
    CACCST.set("SCEVEN", "PP10");
    CACCST.set("SCACTY", "903");
    
    if (!queryCACCST.read(CACCST)) {
      PROC = "";
      updateProcessFlag(divi, yea4, jrno, jsno, "2");
      return;
    } 
    String ait1_CACCST = CACCST.get("SCAIT1").toString().trim();
    String ait2_CACCST = CACCST.get("SCAIT2").toString().trim();
    String ait3_CACCST = CACCST.get("SCAIT3").toString().trim();
    String ait4_CACCST = CACCST.get("SCAIT4").toString().trim();
    String ait5_CACCST = CACCST.get("SCAIT5").toString().trim();
    String ait6_CACCST = CACCST.get("SCAIT6").toString().trim();
    String ait7_CACCST = CACCST.get("SCAIT7").toString().trim();
    logger.debug("ait1_CACCST=" + ait1_CACCST + " ait2_CACCST=" + ait2_CACCST);
    
    String inbn = create_APS450MI_header(divi, yea4, vser, vono, acdt);
    if (inbn != null && !inbn.isEmpty()) {
      if (vtxt.length() == 40) {
        vtxt = vtxt.substring(0, 38) + "X";
      } else {
        vtxt = formatFixedLen(vtxt, 39) + "X";
      }
      create_APS450MI_line(divi, inbn, (acam.toDouble() * (-1)).toString(), vtcd, (acqt.toDouble() * (-1)).toString(), ait1, ait2, ait3, ait4, ait5, ait6, ait7, vtxt);
      create_APS450MI_line(divi, inbn, acam, vtcd, acqt, ait1_CACCST, ait2_CACCST, ait3_CACCST, ait4_CACCST, ait5_CACCST, ait6_CACCST, ait7_CACCST, vtxt);
      validate_APS455MI_ValidByBatchNo(divi, inbn);
      updateProcessFlag(divi, yea4, jrno, jsno, "1");
    }
  }
  
  /*
   * lstFGINAE - Callback function to return FGINAE records
   *
  */
  Closure<?> lstFGINAE = { DBContainer FGINAE ->
    
    puno  = FGINAE.get("F9PUNO").toString();
    pnli  = FGINAE.get("F9PNLI").toString();
    pnls  = FGINAE.get("F9PNLS").toString();
    logger.debug("PUNO=" + puno + " PNLI=" + pnli);
  }
  /*
   * create_APS450MI_header - executing APS450MI.AddHeadRecode
   *
  */
  def String create_APS450MI_header(String divi, String yea4, String vser, String vono, String acdt) {
    logger.debug("Call APS450MI_AddHeadRecode...");
    
    String inbn = "";
    def params = [ "DIVI": divi, "YEA4": yea4, "VSER": vser, "VONO": vono, "ACDT": acdt]; 
    
    def callback = {
      Map<String, String> response ->
      inbn = response.INBN;
      logger.debug("INBN=" + inbn);
    }
    
    miCaller.call("APS450MI","AddHeadRecode", params, callback);
    
    return inbn;
  }
  /*
   * create_APS450MI_line - executing APS450MI.AddLineRecode
   *
  */
  def create_APS450MI_line(String divi, String inbn, String nlam, String vtcd, String acqt, String ait1, String ait2, String ait3, String ait4, String ait5, String ait6, String ait7, String vtxt) {
    logger.debug("Call APS450MI.AddLineRecode...");
    
    
    def params = [ "DIVI": divi, "INBN": inbn, "NLAM": nlam, "VTCD": vtcd, "ACQT": acqt, "AIT1": ait1, "AIT2": ait2, "AIT3": ait3, "AIT4": ait4, "AIT5": ait5, "AIT6": ait6, "AIT7": ait7, "VTXT": vtxt]; 
    def callback = {
    Map<String, String> response ->
      
    }
    
    miCaller.call("APS450MI","AddLineRecode", params, callback);
  }
  /*
   * formatFixedLength
   *
  */  
  def String formatFixedLen(String str, int len) {
    String strTemp = str;
    while (strTemp.length() < len) {
      strTemp += " ";
    }
    return strTemp;
  }
  
   /*
   * validate_APS455MI_Validate - executing APS455MI.ValidByBatchNo
   *
  */
  def validate_APS455MI_ValidByBatchNo(String divi, String inbn) {
    logger.debug("Call APS455MI.ValidByBatchNo...");
    def params = [ "DIVI": divi, "INBN": inbn]; 
    def callback = {
    Map<String, String> response ->
    
    }
    miCaller.call("APS455MI","ValidByBatchNo", params, callback);
  }
  /*
   * updateProcessFlag - update PROC in EXTVAR
   *
  */
  def updateProcessFlag(String divi, String yea4, String jrno, String jsno, String proc) {
    
	  DBAction actionEXTVAR = database.table("EXTVAR").index("00").build();
    DBContainer EXTVAR = actionEXTVAR.getContainer();
		EXTVAR.set("EXCONO", XXCONO);
		EXTVAR.set("EXDIVI", divi);
		EXTVAR.set("EXYEA4", yea4.toInteger());
		EXTVAR.set("EXJRNO", jrno.toInteger());
		EXTVAR.set("EXJSNO", jsno.toInteger());
		PROC = proc;
		if (!actionEXTVAR.readLock(EXTVAR, updateEXTVAR)) {
      return;
		}
  }
  /*
  * updateEXTVAR - Callback function
  *
  */
   Closure<?> updateEXTVAR = { LockedResult EXTVAR ->
    EXTVAR.set("EXPROC", PROC.toInteger());
    EXTVAR.set("EXLMDT", currentDate);
  	EXTVAR.set("EXCHNO", EXTVAR.get("EXCHNO").toString().toInteger() +1);
  	EXTVAR.set("EXCHID", program.getUser());
    EXTVAR.update();
   }
}
