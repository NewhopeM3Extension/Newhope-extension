{"signature":"Aj2g+ikd2nodKLBHiHwa6DlfXYpQJle2KQS8sQTTUmcI2VEgPr/EqtxdMK0EFdSyMgjUwdCnQ3fPHpEpKiWRjqZmr6zAMzQkN7bMc4yxbWQOxGmaHVv68/UNHLeXbymzPvyEvnu0aCPj9+1kmDrq7aDk7pserTs31Xj6f9xplPD/lKQBrhL0Yn+ayzBIXAuHFeWfBihhtcb1ROe+yZ+TV+lQXShXR2R7eHSA4omokMU2cFvmj6L48n/VkN/yp5q15e+3FCJkvDuIecNL1Hz7M6f4UWyuqs+fGpFTpL3hev3jRUKTw/KeqT91v75/UO6lOvIxZ5f8Ca/pWvfv34svHFHne+QxFU+HO+ZOhQUTTui5rTRttBiHdDktgwWBqDPAmzMKeshH28akgGPMNGA/8+qQ4QWef+RLxR5t/FHkREZDlxaaMdWKB/9orMIkilf2XwycMHX2M2gKogvlJ/vFrQAMJlKD/K1X42xmaTBRYbNjsFRbUY62TJURTjOyElO0ksFmUdGSVmyiNvj4Ad9Ii6nLluMAOQc7Z+t01rVOTbAbN3t8Oi/O3TZDAkPfAPtOF/PfAvEpr8wUAFYW91zg+4MbbXPy75bliv7sYUNLPo6SvfFf++LOscEqO/s9th/+4ICzRXM2lgr4csmRq9YS9QhqKV6A05D3oibnNUMO+s4q","signedBy":"XtendM3 Team","signed":1697777696305,"message":"Signed by XtendM3 Team","extension":"{\"programModules\":{\"EXT198MI\":{\"program\":\"EXT198MI\",\"triggers\":{},\"transactions\":{\"ProcessVariance\":{\"sourceUuid\":\"deb5a11f-ccd8-4e09-95da-8c3408862174\",\"name\":\"ProcessVariance\",\"program\":\"EXT198MI\",\"description\":\"Process Invoice Variance Recodes\",\"active\":true,\"multi\":false,\"modified\":1695760731451,\"modifiedBy\":\"KVERCO\",\"outputFields\":[],\"inputFields\":[],\"utilities\":[]}},\"batches\":{}}},\"utilities\":{},\"sources\":{\"deb5a11f-ccd8-4e09-95da-8c3408862174\":{\"uuid\":\"deb5a11f-ccd8-4e09-95da-8c3408862174\",\"updated\":1697766072947,\"updatedBy\":\"KVERCO\",\"created\":1695620958580,\"createdBy\":\"KVERCO\",\"apiVersion\":\"0.21\",\"beVersion\":\"16.0.0.20230822184312.6\",\"codeHash\":\"6FE2F66534B5D0EC0839F40B91745D0A6DE60810B59B6D32691CE6E52DB1AECD\",\"code\":\"\"}}}"}