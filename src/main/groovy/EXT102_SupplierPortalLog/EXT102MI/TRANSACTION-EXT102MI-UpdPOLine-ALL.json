{"programModules":{"EXT102MI":{"program":"EXT102MI","triggers":{},"transactions":{"UpdPOLine":{"sourceUuid":"2bbbb741-3ce5-453b-ab3b-f2ba6560656a","name":"UpdPOLine","program":"EXT102MI","description":"Update po line","active":true,"multi":false,"modified":1722563824268,"modifiedBy":"RMURRAY","outputFields":[],"inputFields":[{"name":"PUNO","description":"purchase order number","length":10,"mandatory":true,"type":"A"},{"name":"PNLI","description":"purchase order line","length":3,"mandatory":true,"type":"N"},{"name":"PNLS","description":"purchase order line subnumber","length":3,"mandatory":true,"type":"N"},{"name":"CODT","description":"confirmed delivery date","length":8,"mandatory":false,"type":"N"},{"name":"CPPR","description":"confirmed purchase price","length":17,"mandatory":false,"type":"N"},{"name":"TEL1","description":"terms text","length":36,"mandatory":false,"type":"A"},{"name":"EMAL","description":"email address","length":60,"mandatory":false,"type":"A"}],"utilities":[],"market":"ALL"}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"2bbbb741-3ce5-453b-ab3b-f2ba6560656a":{"uuid":"2bbbb741-3ce5-453b-ab3b-f2ba6560656a","updated":1722563721415,"updatedBy":"RMURRAY","created":1722476495347,"createdBy":"RMURRAY","apiVersion":"0.9","beVersion":"16.0.0.20240520175116.5","language":"GROOVY","codeHash":"50B20C0C2EF0212C95806874E316468D9326E1B5209AAE01E935477A1F914FA0","code":""}}}