{"programModules":{"EXT102MI":{"program":"EXT102MI","triggers":{},"transactions":{"UpdPOLine":{"sourceUuid":"60cf27fe-1782-47ed-aa6a-06bbb37b9702","name":"UpdPOLine","program":"EXT102MI","description":"Upsert item supplier record, and log portal crud transaction","active":true,"multi":false,"modified":1714622250883,"modifiedBy":"RMURRAY","outputFields":[],"inputFields":[{"name":"PUNO","description":"purchase order number","length":10,"mandatory":true,"type":"A"},{"name":"PNLI","description":"purchase order line","length":6,"mandatory":true,"type":"A"},{"name":"PNLS","description":"purchase order line subnumber","length":3,"mandatory":true,"type":"A"},{"name":"PUPR","description":"purchase price","length":17,"mandatory":false,"type":"N"},{"name":"DWDT","description":"requested delivery date","length":8,"mandatory":false,"type":"N"},{"name":"PITD","description":"purchase order item name","length":60,"mandatory":false,"type":"A"},{"name":"PITT","description":"purchase order item description","length":120,"mandatory":false,"type":"A"},{"name":"TEL1","description":"terms text","length":36,"mandatory":false,"type":"A"},{"name":"EMAL","description":"portal user","length":100,"mandatory":false,"type":"A"},{"name":"PIT2","description":"Old descr","length":120,"mandatory":false,"type":"A"},{"name":"PITO","description":"Old name","length":60,"mandatory":false,"type":"A"},{"name":"PUPO","description":"Old price","length":17,"mandatory":false,"type":"N"},{"name":"DWDO","description":"Old deliv date","length":8,"mandatory":false,"type":"N"},{"name":"TELO","description":"Old text","length":36,"mandatory":false,"type":"A"},{"name":"CRUD","description":"CRUD Action","length":3,"mandatory":true,"type":"A"}],"utilities":[]}},"batches":{},"advancedPrograms":{}}},"utilities":{},"sources":{"60cf27fe-1782-47ed-aa6a-06bbb37b9702":{"uuid":"60cf27fe-1782-47ed-aa6a-06bbb37b9702","updated":1715133011980,"updatedBy":"RMURRAY","created":1709791720762,"createdBy":"RMURRAY","apiVersion":"0.9","beVersion":"16.0.0.20240221054708.9","language":"GROOVY","codeHash":"78F445FB84872D7F84085184B4A0FE00F843224FF59FDB87C470380553CAC3A8","code":""}}}